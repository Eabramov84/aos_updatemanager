image: golang:1.12

stages:
  - test
  - build

before_script:
  - go get -u golang.org/x/lint/golint
  - go get -u github.com/golang/dep/cmd/dep
  - cp -r $CI_PROJECT_DIR /go/src/
  - cd /go/src/aos_updatemanager/
  - dep ensure

test:
  stage: test
  script:
    - cp vendor/gitpct.epam.com/nunc-ota/aos_common/ci/rootCA.crt.pem  /etc/ssl/certs/
    - echo "-------   Run Lint -------"
    - ci/lint.sh
    - echo "-------   Run Unit tests   -------"
    - go test $(go list ./... | grep -v "/vendor\|ssh*") -v

coverage:
  stage: test
  script:
    - cp vendor/gitpct.epam.com/nunc-ota/aos_common/ci/rootCA.crt.pem  /etc/ssl/certs/
    - go test $(go list ./... | grep -v "/vendor\|ssh*") -v -coverprofile .testCoverage.txt
    - go tool cover -func=.testCoverage.txt

build:
  stage: build
  script:
    - go build
    - tar czf artifacts.tar.gz aos_updatemanager aos_updatemanager.cfg
    - curl -H "X-JFrog-Art-Api:$CI_ARTIFACTS_TOKEN" -T ./artifacts.tar.gz "https://artifactory.epam.com/artifactory/NUNC-OTA/update_manager/builds/$CI_PIPELINE_ID/"
